
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 03 00:06:29 CEST 2015
//----------------------------------------------------

package oblig1NF;

import java_cup.runtime.*;
import syntaxtree.*;
import java.util.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 03 00:06:29 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\006\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\005\003\000\002\005\005\000" +
    "\002\004\003\000\002\004\004\000\002\011\007\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\010\007\000\002\013\015" +
    "\000\002\013\013\000\002\013\014\000\002\013\012\000" +
    "\002\013\014\000\002\013\012\000\002\013\014\000\002" +
    "\013\012\000\002\013\013\000\002\013\011\000\002\013" +
    "\013\000\002\013\011\000\002\013\010\000\002\013\012" +
    "\000\002\013\011\000\002\014\006\000\002\014\005\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\015\003\000\002\017\003\000\002\017" +
    "\004\000\002\020\006\000\002\020\005\000\002\006\003" +
    "\000\002\006\005\000\002\023\004\000\002\023\003\000" +
    "\002\022\010\000\002\021\010\000\002\016\006\000\002" +
    "\024\005\000\002\024\004\000\002\024\005\000\002\024" +
    "\005\000\002\024\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\033" +
    "\003\000\002\033\005\000\002\034\003\000\002\034\003" +
    "\000\002\036\003\000\002\036\003\000\002\037\003\000" +
    "\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\004\005\001\002\000\004\002\231\001" +
    "\002\000\004\006\006\001\002\000\010\005\013\014\007" +
    "\032\012\001\002\000\004\046\225\001\002\000\044\005" +
    "\uffff\007\uffff\010\uffff\013\uffff\014\uffff\015\uffff\016\uffff" +
    "\020\uffff\032\uffff\033\uffff\034\uffff\035\uffff\042\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\001\002\000\044\005\ufffd" +
    "\007\ufffd\010\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\020" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\042\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\001\002\000\004\046\025\001" +
    "\002\000\004\046\021\001\002\000\012\005\013\007\017" +
    "\014\007\032\012\001\002\000\044\005\ufffc\007\ufffc\010" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\042\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\001\002\000\044\005\ufffb\007\ufffb\010\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\042\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\001\002\000\004\002\001\001\002\000\044\005" +
    "\ufffe\007\ufffe\010\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\020\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\042\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002\000\004\006\022" +
    "\001\002\000\010\005\013\014\007\032\012\001\002\000" +
    "\012\005\013\007\024\014\007\032\012\001\002\000\044" +
    "\005\ufff0\007\ufff0\010\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\020\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\042\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002\000\006\010" +
    "\026\022\027\001\002\000\010\011\203\031\041\046\037" +
    "\001\002\000\014\025\034\026\035\027\031\030\033\046" +
    "\030\001\002\000\012\010\ufff1\011\ufff1\012\ufff1\043\ufff1" +
    "\001\002\000\012\010\ufff3\011\ufff3\012\ufff3\043\ufff3\001" +
    "\002\000\004\010\036\001\002\000\012\010\ufff2\011\ufff2" +
    "\012\ufff2\043\ufff2\001\002\000\012\010\ufff5\011\ufff5\012" +
    "\ufff5\043\ufff5\001\002\000\012\010\ufff4\011\ufff4\012\ufff4" +
    "\043\ufff4\001\002\000\010\011\043\031\041\046\037\001" +
    "\002\000\004\022\200\001\002\000\006\011\167\043\166" +
    "\001\002\000\004\046\163\001\002\000\006\011\ufffa\043" +
    "\ufffa\001\002\000\004\006\044\001\002\000\044\005\013" +
    "\007\045\010\076\013\052\014\007\015\065\016\055\020" +
    "\051\032\012\033\054\034\062\035\073\042\050\046\056" +
    "\047\060\050\066\051\070\001\002\000\044\005\uffe2\007" +
    "\uffe2\010\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\042\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\001\002\000\036\007\uffdb\010\uffdb" +
    "\013\uffdb\015\uffdb\016\uffdb\020\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\042\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\001\002" +
    "\000\032\011\uffc6\012\uffc6\017\uffc6\021\uffc6\023\uffc6\024" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\001\002\000\026\010\076\015\065\020\051\033\054\034" +
    "\062\035\073\046\056\047\060\050\066\051\070\001\002" +
    "\000\026\010\076\015\065\020\051\033\054\034\062\035" +
    "\073\046\056\047\060\050\066\051\070\001\002\000\030" +
    "\010\076\012\uffd9\015\065\020\051\033\054\034\062\035" +
    "\073\046\056\047\060\050\066\051\070\001\002\000\020" +
    "\023\114\024\102\037\105\040\110\041\113\044\107\045" +
    "\106\001\002\000\032\011\uffc0\012\uffc0\017\uffc0\021\uffc0" +
    "\023\uffc0\024\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\001\002\000\026\010\076\015\065\020\051" +
    "\033\054\034\062\035\073\046\056\047\060\050\066\051" +
    "\070\001\002\000\036\010\135\011\uffbe\012\uffbe\017\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\001\002\000\036\007\134" +
    "\010\076\013\052\015\065\016\055\020\051\033\054\034" +
    "\062\035\073\042\050\046\056\047\060\050\066\051\070" +
    "\001\002\000\032\011\uffc4\012\uffc4\017\uffc4\021\uffc4\023" +
    "\uffc4\024\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\001\002\000\004\012\133\001\002\000\032\011" +
    "\uffc1\012\uffc1\017\uffc1\021\uffc1\023\uffc1\024\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002\000" +
    "\036\007\uffda\010\uffda\013\uffda\015\uffda\016\uffda\020\uffda" +
    "\033\uffda\034\uffda\035\uffda\042\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\001\002\000\032\011\uffca\012\uffca\017\uffca" +
    "\021\uffca\023\uffca\024\uffca\037\uffca\040\uffca\041\uffca\043" +
    "\uffca\044\uffca\045\uffca\001\002\000\004\046\132\001\002" +
    "\000\032\011\uffc3\012\uffc3\017\uffc3\021\uffc3\023\uffc3\024" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\001\002\000\044\005\013\007\126\010\076\013\052\014" +
    "\007\015\065\016\055\020\051\032\012\033\054\034\062" +
    "\035\073\042\050\046\056\047\060\050\066\051\070\001" +
    "\002\000\032\011\uffc2\012\uffc2\017\uffc2\021\uffc2\023\uffc2" +
    "\024\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\001\002\000\022\022\123\023\uffc9\024\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\044\uffc9\045\uffc9\001\002\000\022\012" +
    "\122\023\uffc7\024\uffc7\037\uffc7\040\uffc7\041\uffc7\044\uffc7" +
    "\045\uffc7\001\002\000\032\011\uffbf\012\uffbf\017\uffbf\021" +
    "\uffbf\023\uffbf\024\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\001\002\000\036\007\ufff8\010\ufff8\013" +
    "\ufff8\015\ufff8\016\ufff8\020\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\042\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\001\002\000" +
    "\004\012\121\001\002\000\026\010\076\015\065\020\051" +
    "\033\054\034\062\035\073\046\056\047\060\050\066\051" +
    "\070\001\002\000\032\011\uffc7\012\uffc7\017\uffc7\021\uffc7" +
    "\023\uffc7\024\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\001\002\000\022\011\112\023\114\024\102" +
    "\037\105\040\110\041\113\044\107\045\106\001\002\000" +
    "\032\011\uffc9\012\uffc9\017\uffc9\021\uffc9\023\uffc9\024\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\001" +
    "\002\000\026\010\uffb7\015\uffb7\020\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\001\002\000" +
    "\026\010\076\015\065\020\051\033\054\034\062\035\073" +
    "\046\056\047\060\050\066\051\070\001\002\000\026\010" +
    "\076\015\065\020\051\033\054\034\062\035\073\046\056" +
    "\047\060\050\066\051\070\001\002\000\026\010\uffbc\015" +
    "\uffbc\020\uffbc\033\uffbc\034\uffbc\035\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\001\002\000\026\010\uffbb\015\uffbb\020" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\001\002\000\004\046\116\001\002\000\026\010" +
    "\uffba\015\uffba\020\uffba\033\uffba\034\uffba\035\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\001\002\000\026\010\076\015" +
    "\065\020\051\033\054\034\062\035\073\046\056\047\060" +
    "\050\066\051\070\001\002\000\032\011\uffc8\012\uffc8\017" +
    "\uffc8\021\uffc8\023\uffc8\024\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\001\002\000\026\010\uffb9\015" +
    "\uffb9\020\uffb9\033\uffb9\034\uffb9\035\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\001\002\000\026\010\uffb8\015\uffb8\020" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\001\002\000\032\011\uffcb\012\uffcb\017\uffcb\021" +
    "\uffcb\023\114\024\102\037\105\040\110\041\113\043\uffcb" +
    "\044\107\045\106\001\002\000\034\011\uffbd\012\uffbd\017" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\043\uffbd\044\uffbd\045\uffbd\001\002\000\032\011" +
    "\uffcc\012\uffcc\017\uffcc\021\uffcc\023\114\024\102\037\105" +
    "\040\110\041\113\043\uffcc\044\107\045\106\001\002\000" +
    "\032\011\uffce\012\uffce\017\uffce\021\uffce\023\114\024\102" +
    "\037\105\040\110\041\113\043\uffce\044\107\045\106\001" +
    "\002\000\036\007\uffdd\010\uffdd\013\uffdd\015\uffdd\016\uffdd" +
    "\020\uffdd\033\uffdd\034\uffdd\035\uffdd\042\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\001\002\000\036\007\uffdc\010\uffdc" +
    "\013\uffdc\015\uffdc\016\uffdc\020\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\042\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\001\002" +
    "\000\004\036\124\001\002\000\026\010\076\015\065\020" +
    "\051\033\054\034\062\035\073\046\056\047\060\050\066" +
    "\051\070\001\002\000\022\012\uffcf\023\114\024\102\037" +
    "\105\040\110\041\113\044\107\045\106\001\002\000\044" +
    "\005\uffe7\007\uffe7\010\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\020\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\042\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\001\002\000\036\007" +
    "\130\010\076\013\052\015\065\016\055\020\051\033\054" +
    "\034\062\035\073\042\050\046\056\047\060\050\066\051" +
    "\070\001\002\000\044\005\uffe9\007\uffe9\010\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\020\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\042\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\001\002\000\036\007\ufff7\010\ufff7\013\ufff7\015\ufff7\016" +
    "\ufff7\020\ufff7\033\ufff7\034\ufff7\035\ufff7\042\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\001\002\000\032\011\uffcd\012" +
    "\uffcd\017\uffcd\021\uffcd\023\uffcd\024\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\043\uffcd\044\uffcd\045\uffcd\001\002\000\036\007" +
    "\uffde\010\uffde\013\uffde\015\uffde\016\uffde\020\uffde\033\uffde" +
    "\034\uffde\035\uffde\042\uffde\046\uffde\047\uffde\050\uffde\051" +
    "\uffde\001\002\000\044\005\uffe5\007\uffe5\010\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\020\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\042\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\001\002\000\032\010\076\011\142\015\065\020\051\031" +
    "\137\033\054\034\062\035\073\046\056\047\060\050\066" +
    "\051\070\001\002\000\024\011\uffd2\023\114\024\102\037" +
    "\105\040\110\041\113\043\uffd2\044\107\045\106\001\002" +
    "\000\026\010\076\015\065\020\051\033\054\034\062\035" +
    "\073\046\056\047\060\050\066\051\070\001\002\000\006" +
    "\011\uffd5\043\uffd5\001\002\000\006\011\144\043\143\001" +
    "\002\000\032\011\uffd6\012\uffd6\017\uffd6\021\uffd6\023\uffd6" +
    "\024\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\001\002\000\030\010\076\015\065\020\051\031\137" +
    "\033\054\034\062\035\073\046\056\047\060\050\066\051" +
    "\070\001\002\000\032\011\uffd7\012\uffd7\017\uffd7\021\uffd7" +
    "\023\uffd7\024\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\001\002\000\006\011\uffd4\043\uffd4\001\002" +
    "\000\024\011\uffd3\023\uffc9\024\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\043\uffd3\044\uffc9\045\uffc9\001\002\000\022\017\150" +
    "\023\114\024\102\037\105\040\110\041\113\044\107\045" +
    "\106\001\002\000\004\006\151\001\002\000\034\010\076" +
    "\013\052\015\065\016\055\020\051\033\054\034\062\035" +
    "\073\042\050\046\056\047\060\050\066\051\070\001\002" +
    "\000\004\007\153\001\002\000\036\007\uffd1\010\uffd1\013" +
    "\uffd1\015\uffd1\016\uffd1\020\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\042\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002\000" +
    "\022\012\uffd8\023\114\024\102\037\105\040\110\041\113" +
    "\044\107\045\106\001\002\000\032\011\uffc5\012\uffc5\017" +
    "\uffc5\021\uffc5\023\uffc5\024\uffc5\037\105\040\110\041\113" +
    "\043\uffc5\044\107\045\106\001\002\000\022\021\157\023" +
    "\114\024\102\037\105\040\110\041\113\044\107\045\106" +
    "\001\002\000\004\006\160\001\002\000\034\010\076\013" +
    "\052\015\065\016\055\020\051\033\054\034\062\035\073" +
    "\042\050\046\056\047\060\050\066\051\070\001\002\000" +
    "\004\007\162\001\002\000\036\007\uffd0\010\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\020\uffd0\033\uffd0\034\uffd0\035\uffd0\042" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002\000\004" +
    "\022\164\001\002\000\014\025\034\026\035\027\031\030" +
    "\033\046\030\001\002\000\006\011\uffe0\043\uffe0\001\002" +
    "\000\006\031\041\046\037\001\002\000\004\006\170\001" +
    "\002\000\042\005\013\010\076\013\052\014\007\015\065" +
    "\016\055\020\051\032\012\033\054\034\062\035\073\042" +
    "\050\046\056\047\060\050\066\051\070\001\002\000\036" +
    "\007\176\010\076\013\052\015\065\016\055\020\051\033" +
    "\054\034\062\035\073\042\050\046\056\047\060\050\066" +
    "\051\070\001\002\000\044\005\013\007\173\010\076\013" +
    "\052\014\007\015\065\016\055\020\051\032\012\033\054" +
    "\034\062\035\073\042\050\046\056\047\060\050\066\051" +
    "\070\001\002\000\044\005\uffed\007\uffed\010\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\020\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\042\uffed\046\uffed\047\uffed\050\uffed\051\uffed" +
    "\001\002\000\036\007\175\010\076\013\052\015\065\016" +
    "\055\020\051\033\054\034\062\035\073\042\050\046\056" +
    "\047\060\050\066\051\070\001\002\000\044\005\uffef\007" +
    "\uffef\010\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\042\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\001\002\000\044\005\uffeb\007\uffeb" +
    "\010\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\042\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\001\002\000\006\011\ufff9\043\ufff9\001" +
    "\002\000\014\025\034\026\035\027\031\030\033\046\030" +
    "\001\002\000\006\011\uffdf\043\uffdf\001\002\000\006\011" +
    "\214\043\166\001\002\000\004\006\204\001\002\000\044" +
    "\005\013\007\205\010\076\013\052\014\007\015\065\016" +
    "\055\020\051\032\012\033\054\034\062\035\073\042\050" +
    "\046\056\047\060\050\066\051\070\001\002\000\044\005" +
    "\uffe3\007\uffe3\010\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\020\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\042\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\001\002\000\036\007\213" +
    "\010\076\013\052\015\065\016\055\020\051\033\054\034" +
    "\062\035\073\042\050\046\056\047\060\050\066\051\070" +
    "\001\002\000\044\005\013\007\210\010\076\013\052\014" +
    "\007\015\065\016\055\020\051\032\012\033\054\034\062" +
    "\035\073\042\050\046\056\047\060\050\066\051\070\001" +
    "\002\000\044\005\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\020\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\042\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\001\002" +
    "\000\036\007\212\010\076\013\052\015\065\016\055\020" +
    "\051\033\054\034\062\035\073\042\050\046\056\047\060" +
    "\050\066\051\070\001\002\000\044\005\uffe8\007\uffe8\010" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\042\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\001\002\000\044\005\uffe4\007\uffe4\010\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\042\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\001\002\000\004\006\215\001\002\000\044\005" +
    "\013\007\216\010\076\013\052\014\007\015\065\016\055" +
    "\020\051\032\012\033\054\034\062\035\073\042\050\046" +
    "\056\047\060\050\066\051\070\001\002\000\044\005\uffe1" +
    "\007\uffe1\010\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\042\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\001\002\000\036\007\224\010" +
    "\076\013\052\015\065\016\055\020\051\033\054\034\062" +
    "\035\073\042\050\046\056\047\060\050\066\051\070\001" +
    "\002\000\044\005\013\007\221\010\076\013\052\014\007" +
    "\015\065\016\055\020\051\032\012\033\054\034\062\035" +
    "\073\042\050\046\056\047\060\050\066\051\070\001\002" +
    "\000\044\005\uffec\007\uffec\010\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\020\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\042\uffec\046\uffec\047\uffec\050\uffec\051\uffec\001\002\000" +
    "\036\007\223\010\076\013\052\015\065\016\055\020\051" +
    "\033\054\034\062\035\073\042\050\046\056\047\060\050" +
    "\066\051\070\001\002\000\044\005\uffee\007\uffee\010\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\020\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\042\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\uffee\001\002\000\044\005\uffea\007\uffea\010\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\020\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\042\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\001\002\000\004\022\226\001\002\000\014\025\034" +
    "\026\035\027\031\030\033\046\030\001\002\000\004\012" +
    "\230\001\002\000\044\005\ufff6\007\ufff6\010\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\020\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\042\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\013\007\007\010\010\011\014" +
    "\013\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\017\010\010\011\014\013\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\022\007\007\010\010\011" +
    "\014\013\015\001\001\000\012\007\017\010\010\011\014" +
    "\013\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\201\014\041\001\001\000\004\012\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\037\014\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\066\004\056\007\007\010\010\011\014\013" +
    "\015\015\073\016\074\017\060\020\071\021\045\022\062" +
    "\024\052\031\063\032\046\033\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\076" +
    "\024\155\031\063\032\046\033\100\001\001\000\014\020" +
    "\076\024\154\031\063\032\046\033\100\001\001\000\014" +
    "\020\076\024\153\031\063\032\046\033\100\001\001\000" +
    "\010\034\103\036\102\037\110\001\001\000\002\001\001" +
    "\000\014\020\076\024\146\031\063\032\046\033\100\001" +
    "\001\000\002\001\001\000\026\015\130\016\074\017\060" +
    "\020\071\021\045\022\062\024\052\031\063\032\046\033" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\126\007\017\010\010" +
    "\011\014\013\015\015\073\016\074\017\060\020\071\021" +
    "\045\022\062\024\052\031\063\032\046\033\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\076\024\077\031\063\032\046\033\100\001\001\000" +
    "\002\001\001\000\010\034\103\036\102\037\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\076\024" +
    "\117\031\063\032\046\033\100\001\001\000\014\020\076" +
    "\024\116\031\063\032\046\033\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\076\024\114\031\063\032\046\033\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\103\036\102\037\110\001\001\000\002\001" +
    "\001\000\010\034\103\036\102\037\110\001\001\000\010" +
    "\034\103\036\102\037\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\076\024\124" +
    "\031\063\032\046\033\100\001\001\000\010\034\103\036" +
    "\102\037\110\001\001\000\002\001\001\000\026\015\130" +
    "\016\074\017\060\020\071\021\045\022\062\024\052\031" +
    "\063\032\046\033\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\140\020\076\023\137\024\135\031\063" +
    "\032\046\033\100\001\001\000\010\034\103\036\102\037" +
    "\110\001\001\000\014\020\076\024\052\031\063\032\046" +
    "\033\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\076\023\144\024\135\031\063" +
    "\032\046\033\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\034\103\036\102\037\110" +
    "\001\001\000\002\001\001\000\026\015\151\016\074\017" +
    "\060\020\071\021\045\022\062\024\052\031\063\032\046" +
    "\033\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\103\036\102\037\110\001\001\000\010\034\103" +
    "\036\102\037\110\001\001\000\010\034\103\036\102\037" +
    "\110\001\001\000\002\001\001\000\026\015\160\016\074" +
    "\017\060\020\071\021\045\022\062\024\052\031\063\032" +
    "\046\033\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\164\001\001\000\002\001" +
    "\001\000\004\014\176\001\001\000\002\001\001\000\042" +
    "\003\171\004\170\007\007\010\010\011\014\013\015\015" +
    "\073\016\074\017\060\020\071\021\045\022\062\024\052" +
    "\031\063\032\046\033\070\001\001\000\026\015\130\016" +
    "\074\017\060\020\071\021\045\022\062\024\052\031\063" +
    "\032\046\033\070\001\001\000\040\004\173\007\017\010" +
    "\010\011\014\013\015\015\073\016\074\017\060\020\071" +
    "\021\045\022\062\024\052\031\063\032\046\033\070\001" +
    "\001\000\002\001\001\000\026\015\130\016\074\017\060" +
    "\020\071\021\045\022\062\024\052\031\063\032\046\033" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\206\004\205" +
    "\007\007\010\010\011\014\013\015\015\073\016\074\017" +
    "\060\020\071\021\045\022\062\024\052\031\063\032\046" +
    "\033\070\001\001\000\002\001\001\000\026\015\130\016" +
    "\074\017\060\020\071\021\045\022\062\024\052\031\063" +
    "\032\046\033\070\001\001\000\040\004\210\007\017\010" +
    "\010\011\014\013\015\015\073\016\074\017\060\020\071" +
    "\021\045\022\062\024\052\031\063\032\046\033\070\001" +
    "\001\000\002\001\001\000\026\015\130\016\074\017\060" +
    "\020\071\021\045\022\062\024\052\031\063\032\046\033" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\217\004\216\007\007\010\010\011" +
    "\014\013\015\015\073\016\074\017\060\020\071\021\045" +
    "\022\062\024\052\031\063\032\046\033\070\001\001\000" +
    "\002\001\001\000\026\015\130\016\074\017\060\020\071" +
    "\021\045\022\062\024\052\031\063\032\046\033\070\001" +
    "\001\000\040\004\221\007\017\010\010\011\014\013\015" +
    "\015\073\016\074\017\060\020\071\021\045\022\062\024" +
    "\052\031\063\032\046\033\070\001\001\000\002\001\001" +
    "\000\026\015\130\016\074\017\060\020\071\021\045\022" +
    "\062\024\052\031\063\032\046\033\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	public static void main(String[] args){
	  try {
	    parser parser = new parser(new Lexer(new FileReader(args[0])));
	    parser.parse();
	  } catch (Exception e) { e.printStackTrace(); }
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // log_op ::= AND 
            {
              LogOp RESULT =null;
		 RESULT = new LogOp("&&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // log_op ::= OR 
            {
              LogOp RESULT =null;
		 RESULT = new LogOp("||"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rel_op ::= LT 
            {
              RelOp RESULT =null;
		 RESULT = new RelOp("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // rel_op ::= GT 
            {
              RelOp RESULT =null;
		 RESULT = new RelOp(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arit_op ::= EXPOP 
            {
              AritOp RESULT =null;
		 RESULT = new AritOp("#"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arit_op ::= PLUS 
            {
              AritOp RESULT =null;
		 RESULT = new AritOp("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // var ::= exp FSTOP ID 
            {
              Var RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(e, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // var ::= ID 
            {
              Var RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= NULL 
            {
              Literal RESULT =null;
		 RESULT = new Literal("null", "null"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal ::= TRUE 
            {
              Literal RESULT =null;
		 RESULT = new Literal("TRUE", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal ::= FALSE 
            {
              Literal RESULT =null;
		 RESULT = new Literal("FALSE", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= FLOAT_LITERAL 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("FLOAT", f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("INT", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= STRING_LITERAL 
            {
              Literal RESULT =null;
		 RESULT = new Literal("STRING", "a string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= NOT exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(e); RESULT = new Expression("not", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= numb 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal n = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(n); RESULT = new Expression("literal", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= call_stmt 
            {
              Expression RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStatement cs = (CallStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(cs); RESULT = new Expression("call_stmt", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= LPAR exp RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(e); RESULT = new Expression("parenthesis", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= var 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(v); RESULT = new Expression("var", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(l); RESULT = new Expression("literal", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp log_op exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LogOp lp = (LogOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(lp); list.add(e1); list.add(e2); RESULT = new Expression("log", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp arit_op exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AritOp ap = (AritOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(ap); list.add(e1); list.add(e2); RESULT = new Expression("AritOp", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= NEW ID 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(new Type(name)); RESULT = new Expression("new", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp rel_op exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RelOp ro = (RelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(ro); list.add(e1); list.add(e2); RESULT = new Expression("rel", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assign_stmt ::= var COLON EQUAL exp 
            {
              AssignStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatement(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // while_stmt ::= WHILE exp DO LBRACK stmt RBRACK 
            {
              WhileStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStatement(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_stmt ::= IF exp THEN LBRACK stmt RBRACK 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStatement(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // actual_param ::= exp 
            {
              ActualParam RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ActualParam(null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // actual_param ::= REF var 
            {
              ActualParam RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ActualParam(v, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // actual_param_list ::= actual_param_list COMMA actual_param 
            {
              List<AstNode> RESULT =null;
		int aplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> apl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActualParam ap = (ActualParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 apl.add(ap); RESULT = apl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // actual_param_list ::= actual_param 
            {
              List<AstNode> RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActualParam ap = (ActualParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> l = new LinkedList<AstNode>();
                                      l.add(ap);
                                      RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // call_stmt ::= ID LPAR RPAR 
            {
              CallStatement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallStatement(name, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // call_stmt ::= ID LPAR actual_param_list RPAR 
            {
              CallStatement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> apl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStatement(name, apl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // return_stmt ::= RETURN exp 
            {
              ReturnStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnStatement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // return_stmt ::= RETURN 
            {
              ReturnStatement RESULT =null;
		 RESULT = new ReturnStatement(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= if_stmt 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement is = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Statement(is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int wtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatement wt = (WhileStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Statement(wt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= call_stmt SEMI 
            {
              Statement RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallStatement ct = (CallStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(ct); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= assign_stmt SEMI 
            {
              Statement RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStatement as = (AssignStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= return_stmt SEMI 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReturnStatement rs = (ReturnStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(rs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= ID COLON type 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(name, t, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param ::= REF ID COLON type 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(name, t, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // proc_decl ::= PROC ID LPAR param_list RPAR LBRACK RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ProcDecl(name, null, pl, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // proc_decl ::= PROC ID COLON type LPAR RPAR LBRACK RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ProcDecl(name, t, null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // proc_decl ::= PROC ID LPAR RPAR LBRACK RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ProcDecl(name, null, null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // proc_decl ::= PROC ID LPAR RPAR LBRACK stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, null, null, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // proc_decl ::= PROC ID COLON type LPAR RPAR LBRACK stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, null, null, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // proc_decl ::= PROC ID LPAR RPAR LBRACK decl_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, null, vdl, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // proc_decl ::= PROC ID COLON type LPAR RPAR LBRACK decl_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, null, vdl, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // proc_decl ::= PROC ID LPAR RPAR LBRACK decl_list stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, null, vdl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proc_decl ::= PROC ID COLON type LPAR RPAR LBRACK decl_list stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, null, vdl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proc_decl ::= PROC ID LPAR param_list RPAR LBRACK stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, pl, null, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // proc_decl ::= PROC ID COLON type LPAR param_list RPAR LBRACK stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, pl, null, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // proc_decl ::= PROC ID LPAR param_list RPAR LBRACK decl_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, pl, vdl, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proc_decl ::= PROC ID COLON type LPAR param_list RPAR LBRACK decl_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, pl, vdl, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proc_decl ::= PROC ID LPAR param_list RPAR LBRACK decl_list stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, pl, vdl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proc_decl ::= PROC ID COLON type LPAR param_list RPAR LBRACK decl_list stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, pl, vdl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_decl ::= CLASS ID LBRACK decl_list RBRACK 
            {
              ClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDecl(name, vdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= ID 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type("bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type("string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= VAR ID COLON type SEMI 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_list ::= stmt_list stmt 
            {
              List<AstNode> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt_list ::= stmt 
            {
              List<AstNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> l = new LinkedList<AstNode>();
                                      l.add(s);
                                      RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // param_list ::= param_list COMMA param 
            {
              List<AstNode> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pl.add(p); RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // param_list ::= param 
            {
              List<AstNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> l = new LinkedList<AstNode>();
                                      l.add(p);
                                      RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= proc_decl 
            {
              AstNode RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcDecl pd = (ProcDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= var_decl 
            {
              AstNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= class_decl 
            {
              AstNode RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDecl sd = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= decl_list decl 
            {
              List<AstNode> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> dl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode d = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl 
            {
              List<AstNode> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode d = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> l = new LinkedList<AstNode>();
                                      l.add(d);
                                      RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM LBRACK decl_list RBRACK 
            {
              Program RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> dl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(dl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


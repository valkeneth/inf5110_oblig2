
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 02 13:24:40 CEST 2015
//----------------------------------------------------

package oblig1NF;

import java_cup.runtime.*;
import syntaxtree.*;
import java.util.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 02 13:24:40 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\006\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\005\003\000\002\005\005\000" +
    "\002\004\003\000\002\004\004\000\002\011\007\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\010\007\000\002\013\015" +
    "\000\002\013\013\000\002\013\014\000\002\013\012\000" +
    "\002\013\014\000\002\013\012\000\002\013\014\000\002" +
    "\013\012\000\002\013\013\000\002\013\011\000\002\013" +
    "\013\000\002\013\011\000\002\014\006\000\002\014\005" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\003\000\002\017\003\000\002\017\004\000\002" +
    "\020\006\000\002\020\005\000\002\006\003\000\002\006" +
    "\005\000\002\022\004\000\002\022\003\000\002\021\010" +
    "\000\002\016\006\000\002\023\005\000\002\023\004\000" +
    "\002\023\005\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\004\000\002\030" +
    "\003\000\002\032\003\000\002\032\005\000\002\033\003" +
    "\000\002\033\003\000\002\035\003\000\002\035\003\000" +
    "\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\004\005\001\002\000\004\002\205\001" +
    "\002\000\004\006\006\001\002\000\010\005\013\014\007" +
    "\027\012\001\002\000\004\037\201\001\002\000\032\005" +
    "\uffff\007\uffff\013\uffff\014\uffff\015\uffff\016\uffff\020\uffff" +
    "\027\uffff\037\uffff\040\uffff\041\uffff\042\uffff\001\002\000" +
    "\032\005\ufffd\007\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\020\ufffd\027\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\001" +
    "\002\000\004\037\025\001\002\000\004\037\021\001\002" +
    "\000\012\005\013\007\017\014\007\027\012\001\002\000" +
    "\032\005\ufffc\007\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\020\ufffc\027\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001" +
    "\002\000\032\005\ufffb\007\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\020\ufffb\027\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\001\002\000\004\002\001\001\002\000\032\005\ufffe" +
    "\007\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\020\ufffe\027" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\001\002\000\004" +
    "\006\022\001\002\000\010\005\013\014\007\027\012\001" +
    "\002\000\012\005\013\007\024\014\007\027\012\001\002" +
    "\000\032\005\ufff0\007\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\020\ufff0\027\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\001\002\000\006\010\026\021\027\001\002\000\010\011" +
    "\161\026\041\037\037\001\002\000\014\022\034\023\035" +
    "\024\031\025\033\037\030\001\002\000\012\010\ufff1\011" +
    "\ufff1\012\ufff1\034\ufff1\001\002\000\012\010\ufff3\011\ufff3" +
    "\012\ufff3\034\ufff3\001\002\000\004\010\036\001\002\000" +
    "\012\010\ufff2\011\ufff2\012\ufff2\034\ufff2\001\002\000\012" +
    "\010\ufff5\011\ufff5\012\ufff5\034\ufff5\001\002\000\012\010" +
    "\ufff4\011\ufff4\012\ufff4\034\ufff4\001\002\000\010\011\043" +
    "\026\041\037\037\001\002\000\004\021\156\001\002\000" +
    "\006\011\145\034\144\001\002\000\004\037\141\001\002" +
    "\000\006\011\ufffa\034\ufffa\001\002\000\004\006\044\001" +
    "\002\000\030\005\013\013\047\014\007\015\060\016\051" +
    "\020\046\027\012\037\052\040\054\041\062\042\063\001" +
    "\002\000\024\011\uffcd\012\uffcd\017\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\001\002\000\016\015" +
    "\060\020\046\037\052\040\054\041\062\042\063\001\002" +
    "\000\020\012\uffdd\015\060\020\046\037\052\040\054\041" +
    "\062\042\063\001\002\000\014\031\102\032\101\033\100" +
    "\035\077\036\103\001\002\000\016\015\060\020\046\037" +
    "\052\040\054\041\062\042\063\001\002\000\030\010\120" +
    "\011\uffca\012\uffca\017\uffca\021\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\001\002\000\024\007\117" +
    "\013\047\015\060\016\051\020\046\037\052\040\054\041" +
    "\062\042\063\001\002\000\024\011\uffcb\012\uffcb\017\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\001" +
    "\002\000\004\012\116\001\002\000\024\011\uffd0\012\uffd0" +
    "\017\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\001\002\000\024\007\uffde\013\uffde\015\uffde\016\uffde" +
    "\020\uffde\037\uffde\040\uffde\041\uffde\042\uffde\001\002\000" +
    "\004\037\115\001\002\000\032\005\013\007\111\013\047" +
    "\014\007\015\060\016\051\020\046\027\012\037\052\040" +
    "\054\041\062\042\063\001\002\000\024\011\uffc4\012\uffc4" +
    "\017\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\001\002\000\024\011\uffc3\012\uffc3\017\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\001\002\000" +
    "\016\021\072\031\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf" +
    "\001\002\000\016\012\071\031\uffce\032\uffce\033\uffce\035" +
    "\uffce\036\uffce\001\002\000\024\007\ufff8\013\ufff8\015\ufff8" +
    "\016\ufff8\020\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\001" +
    "\002\000\004\012\070\001\002\000\024\007\uffe0\013\uffe0" +
    "\015\uffe0\016\uffe0\020\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\001\002\000\024\007\uffdf\013\uffdf\015\uffdf\016\uffdf" +
    "\020\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\001\002\000" +
    "\004\030\073\001\002\000\016\015\060\020\046\037\052" +
    "\040\054\041\062\042\063\001\002\000\024\011\uffce\012" +
    "\uffce\017\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\001\002\000\016\012\uffd4\031\102\032\101\033" +
    "\100\035\077\036\103\001\002\000\024\011\uffcf\012\uffcf" +
    "\017\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\001\002\000\004\037\110\001\002\000\016\015\uffc5" +
    "\020\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\001\002\000" +
    "\016\015\uffc6\020\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\001\002\000\016\015\uffc8\020\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\001\002\000\016\015\uffc7\020\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\001\002\000\016\015\060\020" +
    "\046\037\052\040\054\041\062\042\063\001\002\000\016" +
    "\015\060\020\046\037\052\040\054\041\062\042\063\001" +
    "\002\000\024\011\uffd3\012\uffd3\017\uffd3\031\102\032\101" +
    "\033\100\034\uffd3\035\077\036\103\001\002\000\024\011" +
    "\uffd1\012\uffd1\017\uffd1\031\102\032\101\033\100\034\uffd1" +
    "\035\077\036\103\001\002\000\026\011\uffc9\012\uffc9\017" +
    "\uffc9\021\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\001\002\000\032\005\uffe7\007\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\020\uffe7\027\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\001\002\000\024\007\113\013\047\015" +
    "\060\016\051\020\046\037\052\040\054\041\062\042\063" +
    "\001\002\000\032\005\uffe9\007\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\020\uffe9\027\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\001\002\000\024\007\ufff7\013\ufff7\015\ufff7\016" +
    "\ufff7\020\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\001\002" +
    "\000\024\011\uffd2\012\uffd2\017\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\001\002\000\024\007\uffe1" +
    "\013\uffe1\015\uffe1\016\uffe1\020\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\001\002\000\032\005\uffe5\007\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\020\uffe5\027\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\001\002\000\022\011\124\015\060" +
    "\020\046\026\122\037\052\040\054\041\062\042\063\001" +
    "\002\000\020\011\uffd6\031\102\032\101\033\100\034\uffd6" +
    "\035\077\036\103\001\002\000\016\015\060\020\046\037" +
    "\052\040\054\041\062\042\063\001\002\000\006\011\uffd9" +
    "\034\uffd9\001\002\000\024\011\uffda\012\uffda\017\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\001\002" +
    "\000\006\011\127\034\126\001\002\000\020\015\060\020" +
    "\046\026\122\037\052\040\054\041\062\042\063\001\002" +
    "\000\024\011\uffdb\012\uffdb\017\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\001\002\000\006\011\uffd8" +
    "\034\uffd8\001\002\000\020\011\uffd7\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffd7\035\uffcf\036\uffcf\001\002\000\016\017\133" +
    "\031\102\032\101\033\100\035\077\036\103\001\002\000" +
    "\004\006\134\001\002\000\022\013\047\015\060\016\051" +
    "\020\046\037\052\040\054\041\062\042\063\001\002\000" +
    "\004\007\136\001\002\000\024\007\uffd5\013\uffd5\015\uffd5" +
    "\016\uffd5\020\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001" +
    "\002\000\016\012\uffdc\031\102\032\101\033\100\035\077" +
    "\036\103\001\002\000\024\011\uffcc\012\uffcc\017\uffcc\031" +
    "\102\032\101\033\100\034\uffcc\035\077\036\103\001\002" +
    "\000\004\021\142\001\002\000\014\022\034\023\035\024" +
    "\031\025\033\037\030\001\002\000\006\011\uffe3\034\uffe3" +
    "\001\002\000\006\026\041\037\037\001\002\000\004\006" +
    "\146\001\002\000\030\005\013\013\047\014\007\015\060" +
    "\016\051\020\046\027\012\037\052\040\054\041\062\042" +
    "\063\001\002\000\024\007\154\013\047\015\060\016\051" +
    "\020\046\037\052\040\054\041\062\042\063\001\002\000" +
    "\032\005\013\007\151\013\047\014\007\015\060\016\051" +
    "\020\046\027\012\037\052\040\054\041\062\042\063\001" +
    "\002\000\032\005\uffed\007\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\020\uffed\027\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\001\002\000\024\007\153\013\047\015\060\016\051" +
    "\020\046\037\052\040\054\041\062\042\063\001\002\000" +
    "\032\005\uffef\007\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\020\uffef\027\uffef\037\uffef\040\uffef\041\uffef\042\uffef\001" +
    "\002\000\032\005\uffeb\007\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\020\uffeb\027\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\001\002\000\006\011\ufff9\034\ufff9\001\002\000\014" +
    "\022\034\023\035\024\031\025\033\037\030\001\002\000" +
    "\006\011\uffe2\034\uffe2\001\002\000\006\011\171\034\144" +
    "\001\002\000\004\006\162\001\002\000\030\005\013\013" +
    "\047\014\007\015\060\016\051\020\046\027\012\037\052" +
    "\040\054\041\062\042\063\001\002\000\024\007\170\013" +
    "\047\015\060\016\051\020\046\037\052\040\054\041\062" +
    "\042\063\001\002\000\032\005\013\007\165\013\047\014" +
    "\007\015\060\016\051\020\046\027\012\037\052\040\054" +
    "\041\062\042\063\001\002\000\032\005\uffe6\007\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6\027\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\042\uffe6\001\002\000\024\007\167\013" +
    "\047\015\060\016\051\020\046\037\052\040\054\041\062" +
    "\042\063\001\002\000\032\005\uffe8\007\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\020\uffe8\027\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\001\002\000\032\005\uffe4\007\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\027\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\001\002\000\004\006\172\001" +
    "\002\000\030\005\013\013\047\014\007\015\060\016\051" +
    "\020\046\027\012\037\052\040\054\041\062\042\063\001" +
    "\002\000\024\007\200\013\047\015\060\016\051\020\046" +
    "\037\052\040\054\041\062\042\063\001\002\000\032\005" +
    "\013\007\175\013\047\014\007\015\060\016\051\020\046" +
    "\027\012\037\052\040\054\041\062\042\063\001\002\000" +
    "\032\005\uffec\007\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\020\uffec\027\uffec\037\uffec\040\uffec\041\uffec\042\uffec\001" +
    "\002\000\024\007\177\013\047\015\060\016\051\020\046" +
    "\037\052\040\054\041\062\042\063\001\002\000\032\005" +
    "\uffee\007\uffee\013\uffee\014\uffee\015\uffee\016\uffee\020\uffee" +
    "\027\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001\002\000" +
    "\032\005\uffea\007\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\020\uffea\027\uffea\037\uffea\040\uffea\041\uffea\042\uffea\001" +
    "\002\000\004\021\202\001\002\000\014\022\034\023\035" +
    "\024\031\025\033\037\030\001\002\000\004\012\204\001" +
    "\002\000\032\005\ufff6\007\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\020\ufff6\027\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\013\007\007\010\010\011\014" +
    "\013\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\017\010\010\011\014\013\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\022\007\007\010\010\011" +
    "\014\013\015\001\001\000\012\007\017\010\010\011\014" +
    "\013\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\157\014\041\001\001\000\004\012\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\037\014\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\060\004\052\007\007\010\010\011\014\013" +
    "\015\015\065\016\066\017\054\020\064\021\056\023\047" +
    "\030\055\031\044\032\063\001\001\000\002\001\001\000" +
    "\014\020\073\023\137\030\055\031\044\032\075\001\001" +
    "\000\014\020\073\023\136\030\055\031\044\032\075\001" +
    "\001\000\006\033\103\035\104\001\001\000\014\020\073" +
    "\023\131\030\055\031\044\032\075\001\001\000\002\001" +
    "\001\000\024\015\113\016\066\017\054\020\064\021\056" +
    "\023\047\030\055\031\044\032\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\111\007\017\010\010\011" +
    "\014\013\015\015\065\016\066\017\054\020\064\021\056" +
    "\023\047\030\055\031\044\032\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\073\023\074" +
    "\030\055\031\044\032\075\001\001\000\002\001\001\000" +
    "\006\033\103\035\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\073\023\106\030\055" +
    "\031\044\032\075\001\001\000\014\020\073\023\105\030" +
    "\055\031\044\032\075\001\001\000\006\033\103\035\104" +
    "\001\001\000\006\033\103\035\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\113\016\066\017\054" +
    "\020\064\021\056\023\047\030\055\031\044\032\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\124\020" +
    "\073\022\122\023\120\030\055\031\044\032\075\001\001" +
    "\000\006\033\103\035\104\001\001\000\014\020\073\023" +
    "\047\030\055\031\044\032\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\073\022" +
    "\127\023\120\030\055\031\044\032\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\103\035\104\001\001\000\002\001\001\000\024\015\134" +
    "\016\066\017\054\020\064\021\056\023\047\030\055\031" +
    "\044\032\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\103\035\104\001\001\000\006\033\103\035" +
    "\104\001\001\000\002\001\001\000\004\012\142\001\001" +
    "\000\002\001\001\000\004\014\154\001\001\000\002\001" +
    "\001\000\040\003\147\004\146\007\007\010\010\011\014" +
    "\013\015\015\065\016\066\017\054\020\064\021\056\023" +
    "\047\030\055\031\044\032\063\001\001\000\024\015\113" +
    "\016\066\017\054\020\064\021\056\023\047\030\055\031" +
    "\044\032\063\001\001\000\036\004\151\007\017\010\010" +
    "\011\014\013\015\015\065\016\066\017\054\020\064\021" +
    "\056\023\047\030\055\031\044\032\063\001\001\000\002" +
    "\001\001\000\024\015\113\016\066\017\054\020\064\021" +
    "\056\023\047\030\055\031\044\032\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\163\004\162\007\007\010\010\011" +
    "\014\013\015\015\065\016\066\017\054\020\064\021\056" +
    "\023\047\030\055\031\044\032\063\001\001\000\024\015" +
    "\113\016\066\017\054\020\064\021\056\023\047\030\055" +
    "\031\044\032\063\001\001\000\036\004\165\007\017\010" +
    "\010\011\014\013\015\015\065\016\066\017\054\020\064" +
    "\021\056\023\047\030\055\031\044\032\063\001\001\000" +
    "\002\001\001\000\024\015\113\016\066\017\054\020\064" +
    "\021\056\023\047\030\055\031\044\032\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\173\004\172\007\007\010\010\011\014\013\015\015" +
    "\065\016\066\017\054\020\064\021\056\023\047\030\055" +
    "\031\044\032\063\001\001\000\024\015\113\016\066\017" +
    "\054\020\064\021\056\023\047\030\055\031\044\032\063" +
    "\001\001\000\036\004\175\007\017\010\010\011\014\013" +
    "\015\015\065\016\066\017\054\020\064\021\056\023\047" +
    "\030\055\031\044\032\063\001\001\000\002\001\001\000" +
    "\024\015\113\016\066\017\054\020\064\021\056\023\047" +
    "\030\055\031\044\032\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	public static void main(String[] args){
	  try {
	    parser parser = new parser(new Lexer(new FileReader(args[0])));
	    parser.parse();
	  } catch (Exception e) { e.printStackTrace(); }
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // numb ::= FLOAT_LITERAL 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("FLOAT", f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numb",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // numb ::= INTEGER 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("INTEGER", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numb",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rel_op ::= LT 
            {
              RelOp RESULT =null;
		 RESULT = new RelOp("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rel_op ::= GT 
            {
              RelOp RESULT =null;
		 RESULT = new RelOp(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arit_op ::= EXPOP 
            {
              AritOp RESULT =null;
		 RESULT = new AritOp("#"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_op ::= PLUS 
            {
              AritOp RESULT =null;
		 RESULT = new AritOp("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var ::= exp FSTOP ID 
            {
              Var RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(e, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var ::= ID 
            {
              Var RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literal ::= STRING_LITERAL 
            {
              Literal RESULT =null;
		 RESULT = new Literal("STRING", "a string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= NOT exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(e); RESULT = new Expression("not", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= numb 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal n = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(n); RESULT = new Expression("literal", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= call_stmt 
            {
              Expression RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStatement cs = (CallStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(cs); RESULT = new Expression("call_stmt", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= var 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(v); RESULT = new Expression("var", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(l); RESULT = new Expression("literal", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp arit_op exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AritOp ap = (AritOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(ap); list.add(e1); list.add(e2); RESULT = new Expression("arit", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= NEW ID 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(new Type(name)); RESULT = new Expression("new", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp rel_op exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RelOp ro = (RelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> list = new LinkedList<AstNode>();
								list.add(ro); list.add(e1); list.add(e2); RESULT = new Expression("rel", list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assign_stmt ::= var COLON EQUAL exp 
            {
              AssignStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatement(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_stmt ::= IF exp THEN LBRACK stmt RBRACK 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStatement(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // actual_param ::= exp 
            {
              ActualParam RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ActualParam(null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // actual_param ::= REF var 
            {
              ActualParam RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ActualParam(v, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // actual_param_list ::= actual_param_list COMMA actual_param 
            {
              List<AstNode> RESULT =null;
		int aplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> apl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActualParam ap = (ActualParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 apl.add(ap); RESULT = apl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // actual_param_list ::= actual_param 
            {
              List<AstNode> RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActualParam ap = (ActualParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> l = new LinkedList<AstNode>();
                                      l.add(ap);
                                      RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // call_stmt ::= ID LPAR RPAR 
            {
              CallStatement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallStatement(name, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // call_stmt ::= ID LPAR actual_param_list RPAR 
            {
              CallStatement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> apl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStatement(name, apl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return_stmt ::= RETURN exp 
            {
              ReturnStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnStatement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_stmt ::= RETURN 
            {
              ReturnStatement RESULT =null;
		 RESULT = new ReturnStatement(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= if_stmt 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement is = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Statement(is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= call_stmt SEMI 
            {
              Statement RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallStatement ct = (CallStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(ct); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= assign_stmt SEMI 
            {
              Statement RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStatement as = (AssignStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= return_stmt SEMI 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReturnStatement rs = (ReturnStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(rs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // param ::= ID COLON type 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(name, t, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param ::= REF ID COLON type 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(name, t, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // proc_decl ::= PROC ID LPAR RPAR LBRACK stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, null, null, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // proc_decl ::= PROC ID COLON type LPAR RPAR LBRACK stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, null, null, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // proc_decl ::= PROC ID LPAR RPAR LBRACK decl_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, null, vdl, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // proc_decl ::= PROC ID COLON type LPAR RPAR LBRACK decl_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, null, vdl, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // proc_decl ::= PROC ID LPAR RPAR LBRACK decl_list stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, null, vdl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proc_decl ::= PROC ID COLON type LPAR RPAR LBRACK decl_list stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, null, vdl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proc_decl ::= PROC ID LPAR param_list RPAR LBRACK stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, pl, null, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // proc_decl ::= PROC ID COLON type LPAR param_list RPAR LBRACK stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, pl, null, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // proc_decl ::= PROC ID LPAR param_list RPAR LBRACK decl_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, pl, vdl, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proc_decl ::= PROC ID COLON type LPAR param_list RPAR LBRACK decl_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, pl, vdl, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proc_decl ::= PROC ID LPAR param_list RPAR LBRACK decl_list stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, null, pl, vdl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proc_decl ::= PROC ID COLON type LPAR param_list RPAR LBRACK decl_list stmt_list RBRACK 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, pl, vdl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_decl ::= CLASS ID LBRACK decl_list RBRACK 
            {
              ClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> vdl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDecl(name, vdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= ID 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type("bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type("string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= VAR ID COLON type SEMI 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_list ::= stmt_list stmt 
            {
              List<AstNode> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> sl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt_list ::= stmt 
            {
              List<AstNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> l = new LinkedList<AstNode>();
                                      l.add(s);
                                      RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // param_list ::= param_list COMMA param 
            {
              List<AstNode> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AstNode> pl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pl.add(p); RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // param_list ::= param 
            {
              List<AstNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> l = new LinkedList<AstNode>();
                                      l.add(p);
                                      RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= proc_decl 
            {
              AstNode RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcDecl pd = (ProcDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= var_decl 
            {
              AstNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= class_decl 
            {
              AstNode RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDecl sd = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= decl_list decl 
            {
              List<AstNode> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> dl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode d = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl 
            {
              List<AstNode> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode d = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<AstNode> l = new LinkedList<AstNode>();
                                      l.add(d);
                                      RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM LBRACK decl_list RBRACK 
            {
              Program RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AstNode> dl = (List<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(dl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

